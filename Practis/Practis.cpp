#include <iostream> // Підключення бібліотеки для роботи з вхідними та вихідними потоками
using namespace std; // Використання простору імен std

// Ініціалізація ігрової дошки
char board[3][3] = { {'1', '2', '3'},
                     {'4', '5', '6'},
                     {'7', '8', '9'} };
char current_marker; // Змінна для зберігання маркера поточного гравця
int current_player; // Змінна для зберігання номера поточного гравця

// Функція для виведення ігрової дошки
void drawBoard() {
    cout << "-------------\n"; // Верхня межа дошки
    for (int i = 0; i < 3; i++) { // Проходження по рядках дошки
        cout << "| "; // Ліва межа рядка
        for (int j = 0; j < 3; j++) { // Проходження по стовпцях дошки
            cout << board[i][j] << " | "; // Виведення значення комірки і правої межі комірки
        }
        cout << "\n-------------\n"; // Нижня межа рядка
    }
}

// Функція для розміщення маркера на дошці
bool placeMarker(int slot) {
    int row = (slot - 1) / 3; // Обчислення рядка на основі введеного слоту
    int col = (slot - 1) % 3; // Обчислення стовпця на основі введеного слоту

    // Перевірка, чи комірка не зайнята
    if (board[row][col] != 'X' && board[row][col] != '0') {
        board[row][col] = current_marker; // Розміщення маркера на дошці
        return true; // Успішне розміщення маркера
    }
    else {
        return false; // Комірка зайнята, розміщення не відбулось
    }
}

// Функція для визначення переможця
int winner() {
    // Перевірка рядків на виграшну комбінацію
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
            return current_player; // Поточний гравець виграв
        }
    }
    // Перевірка стовпців на виграшну комбінацію
    for (int i = 0; i < 3; i++) {
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
            return current_player; // Поточний гравець виграв
        }
    }
    // Перевірка діагоналей на виграшну комбінацію
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        return current_player; // Поточний гравець виграв
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        return current_player; // Поточний гравець виграв
    }

    return 0; // Немає переможця
}

// Функція для зміни поточного гравця та його маркера
void swapPlayerAndMarker() {
    current_marker = (current_marker == 'X') ? '0' : 'X'; // Зміна маркера
    current_player = (current_player == 1) ? 2 : 1; // Зміна номера гравця
}

// Основна функція гри
void game() {
    char marker_p1; // Змінна для маркера першого гравця
    while (true) { // Цикл для забезпечення правильного вибору маркера
        cout << "Player 1, choose your marker (X or 0): "; // Запит маркера
        cin >> marker_p1; // Зчитування маркера

        if (marker_p1 == 'X' || marker_p1 == '0') { // Перевірка правильності маркера
            break; // Вихід з циклу при правильному маркері
        }
        else {
            cout << "Invalid marker! Choose either X or 0.\n"; // Повідомлення про неправильний маркер
        }
    }

    current_player = 1; // Встановлення першого гравця
    current_marker = marker_p1; // Встановлення маркера першого гравця

    drawBoard(); // Виведення початкової дошки

    int player_won = 0; // Змінна для зберігання результату гри

    for (int i = 0; i < 9; i++) { // Цикл для проведення ходів
        cout << "It's player " << current_player << "'s turn. Enter your slot: "; // Повідомлення про хід гравця
        int slot; // Змінна для зберігання вибраного слоту
        cin >> slot; // Зчитування вибраного слоту

        if (slot < 1 || slot > 9) { // Перевірка правильності слоту
            cout << "That slot is invalid! Try another slot!\n"; // Повідомлення про неправильний слот
            i--; // Зменшення лічильника для повторення ходу
            continue; // Пропуск ітерації
        }

        if (!placeMarker(slot)) { // Перевірка, чи слот зайнятий
            cout << "That slot is occupied! Try another slot!\n"; // Повідомлення про зайнятий слот
            i--; // Зменшення лічильника для повторення ходу
            continue; // Пропуск ітерації
        }

        drawBoard(); // Виведення оновленої дошки

        player_won = winner(); // Перевірка наявності переможця

        if (player_won == 1) { // Перемога першого гравця
            cout << "Player 1 wins! Congratulations!\n"; // Повідомлення про перемогу
            break; // Вихід з циклу
        }
        if (player_won == 2) { // Перемога другого гравця
            cout << "Player 2 wins! Congratulations!\n"; // Повідомлення про перемогу
            break; // Вихід з циклу
        }

        swapPlayerAndMarker(); // Зміна гравця і маркера
    }

    if (player_won == 0) { // Нічия
        cout << "It's a tie!\n"; // Повідомлення про нічию
    }
}

int main() {
    game(); // Виклик функції гри
    return 0; // Завершення програми
}
